package demo.mavenagile.slimbatch.sillybatch.domain;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import demo.mavenagile.slimbatch.dataaccess.BaseDAO;
import demo.mavenagile.slimbatch.dataaccess.DataAccessUtility;

/**
 * <pre>
 * ***
 * *************************************************************************
 * *** This file was generated by DDBTools
 * *** Copyright &copy; 2003, 2009 Kano Consulting Inc.,
 * *** 
 * *** File          : demo.sample.batch.dataaccess.auto.SillyDAO.java
 * *** Creation date : Tue May 23 22:14:33 EDT 2017
 * *** Version       : $Id$
 * *** 
 * *************************************************************************
 * ***
 * </pre>
 */

public class SillyDAO extends BaseDAO<SillyDO>
{
	/**
	 * RCS String
	 */
	public final static String rcs_SillyDAO_java = "$Id$";

	public static final String QUERY_CLEAD_DATA = "UPDATE Silly set Num=0, Square=0, CCube=0, Quartic=0, Quintic=0, Flag=null where ID!=-1";

	public static final String QUERY_SELECTSILLY_1 = "SELECT * FROM Silly where ID=?";
	public static final String QUERY_SELECT_Num_0 = "SELECT * FROM Silly where Flag IS NULL AND ID >= ? AND ID <= ?";
	public static final String QUERY_DETELETFROMSILLY_1 = "DELETE FROM Silly where ID=?";
	// public static final String QUERY_INSERTSILLY_8 = "INSERT INTO Silly (LastUpdate, Flag, Quintic, Quartic, Cube, Square, Num, ID) values(?, ?, ?, ?, ?, ?, ?)";
	public static final String QUERY_INSERTSILLY_8 = "INSERT INTO Silly (Flag, Quintic, Quartic, CCube, Square, Num, ID) values(?, ?, ?, ?, ?, ?, ?)";
	public static final String QUERY_UPDATESILLY_8 = "UPDATE Silly set Num=?, Square=?, CCube=?, Quartic=?, Quintic=?, Flag=?, LastUpdate=? where ID=?";
	public static final String QUERY_SELECTALLFROMSILLY = "SELECT * FROM Silly";
	public static final String QUERY_DELETE_ALL = "DELETE FROM Silly";

	public SillyDAO(Connection varConnection)
	{
		super(varConnection);
	}

	@Override
	public SillyDO readATableRow(ResultSet varResultSet) throws SQLException
	{
		SillyDO tmpDO = null;
		if (varResultSet != null)
		{
			tmpDO = new SillyDO();
			tmpDO.setID(varResultSet.getInt("ID"));
			tmpDO.setNum(varResultSet.getInt("Num"));
			tmpDO.setSquare(varResultSet.getLong("Square"));
			tmpDO.setCube(varResultSet.getLong("CCube"));
			tmpDO.setQuartic(varResultSet.getLong("Quartic"));
			tmpDO.setQuintic(varResultSet.getLong("Quintic"));
			tmpDO.setFlag(varResultSet.getString("Flag"));
			tmpDO.setLastUpdate(varResultSet.getTimestamp("LastUpdate"));
			oStatus = true;
			oErrorCode = 0;
		}
		else
		{
			oStatus = false;
			oErrorCode = -1003;
			oErrorMessage = "Error: invalid result set";
			DataAccessUtility.getLogger().error(oErrorMessage);
		}
		return (tmpDO);
	}

	public SillyDO selectSilly(int varID)
	{
		return (select(SillyDAO.QUERY_SELECTSILLY_1, new Object[] { varID }, "readATableRow"));
	}

	public int deteletAllFromSilly()
	{
		return (delete(SillyDAO.QUERY_DELETE_ALL, null));
	}

	public int deteletFromSilly(int varID)
	{
		return (delete(SillyDAO.QUERY_DETELETFROMSILLY_1, new Object[] { varID }));
	}

	public int deteletFromSilly(SillyDO varDO)
	{
		return (delete(SillyDAO.QUERY_DETELETFROMSILLY_1, new Object[] { varDO.getID() }));
	}

	public int insertSilly(SillyDO varDO)
	{
		return (insert(SillyDAO.QUERY_INSERTSILLY_8, new Object[] { //
				// varDO.getLastUpdate(), // 1
				varDO.getFlag(), // 1
				varDO.getQuintic(), // 2
				varDO.getQuartic(), // 3
				varDO.getCube(), // 4
				varDO.getSquare(), // 5
				varDO.getNum(), // 6
				varDO.getID(), // 7
		}));
	}

	public int cleadData()
	{
		return (update(QUERY_CLEAD_DATA, null));
	}

	public int updateSilly(SillyDO varDO)
	{
		return (update(SillyDAO.QUERY_UPDATESILLY_8, new Object[] { //
				varDO.getNum(), //
				varDO.getSquare(), //
				varDO.getCube(), //
				varDO.getQuartic(), //
				varDO.getQuintic(), //
				varDO.getFlag(), //
				varDO.getLastUpdate(), //
				varDO.getID(), //
		}));
	}

	public List<SillyDO> selectAllFromSilly()
	{
		return (selectList(SillyDAO.QUERY_SELECTALLFROMSILLY, null, "readATableRow"));
	}
	public List<SillyDO> selectQuery(String varQuery)
	{
		return (selectList(varQuery, null, "readATableRow"));
	}
	public List<SillyDO> selectAllWhereNumIsZero(int varMin, int varMax)
	{
		return (selectList(SillyDAO.QUERY_SELECT_Num_0, new Object[] { varMin, varMax }, "readATableRow"));
	}

	public String toXML(List<SillyDO> varSillyDOList)
	{
		return (toXML(varSillyDOList, null, null, 0));
	}

	public String toXML(List<SillyDO> varSillyDOList, String varTagName, String varChildTagName)
	{
		return (toXML(varSillyDOList, varTagName, varChildTagName, 0));
	}

	public String toXML(List<SillyDO> varSillyDOList, int varIndent)
	{
		return (toXML(varSillyDOList, null, null, varIndent));
	}

	public String toXML(List<SillyDO> varSillyDOList, String varTagName, String varChildTagName, int varIndent)
	{
		if (varSillyDOList == null || varSillyDOList.size() <= 0)
			return (null);
		StringBuilder aBuffer = new StringBuilder();
		if (varTagName == null)
			aBuffer.append(DataAccessUtility.getBeginTag("SillyList", varIndent, true));
		else
			aBuffer.append(DataAccessUtility.getBeginTag(varTagName, varIndent, true));
		aBuffer.append(" length").append(DataAccessUtility.BEGIN_ATTRIBUTE_VALUE).append(varSillyDOList.size()).append(DataAccessUtility.END_ATTRIBUTE_VALUE).append(DataAccessUtility.TAG_END_MARK);
		for (SillyDO tmpSillyDO : varSillyDOList)
			aBuffer.append(tmpSillyDO.toXML(varChildTagName, varIndent + 1));
		if (varTagName == null)
			aBuffer.append(DataAccessUtility.getEndTag("SillyList", varIndent));
		else
			aBuffer.append(DataAccessUtility.getEndTag(varTagName, varIndent));
		return (aBuffer.toString());
	}

}
